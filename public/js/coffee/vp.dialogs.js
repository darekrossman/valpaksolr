// Generated by CoffeeScript 1.6.2
(function() {
  var module;

  module = angular.module('vp.dialogs', []);

  module.factory('Dialog', [
    '$document', '$compile', '$rootScope', '$controller', '$location', '$timeout', '$route', function($document, $compile, $rootScope, $controller, $location, $timeout, $route) {
      var body, ctrl, defaults, destroy, dialogBg, dialogEl, getPrevRoute, isClosing, options, prevLocation, prevRoute, scope, show;

      defaults = {
        id: null,
        title: 'Default Title',
        backdrop: true,
        controller: 'BusinessProfileController',
        backdropClass: "modal-backdrop",
        footerTemplate: null,
        dialogClass: "dialog",
        activeClass: "dialog-active",
        dialogBackgroundClass: "dialog-background",
        backgroundActiveClass: "dialog-background-active",
        animationOutSpeed: 300
      };
      dialogEl = null;
      dialogBg = null;
      scope = null;
      options = {};
      prevLocation = null;
      prevRoute = null;
      isClosing = false;
      ctrl = null;
      body = $document.find('body');
      show = function(template, _options, locals) {
        options = angular.extend({}, defaults, _options);
        dialogEl = angular.element('<div class="' + options.dialogClass + '" ng-include="\'' + template + '\'"></div>');
        dialogBg = angular.element('<div class="' + options.dialogBackgroundClass + '"></div>');
        dialogBg.bind('click', function() {
          return scope.$apply(function() {
            return destroy();
          });
        });
        scope = options.scope || $rootScope.$new();
        locals = angular.extend({
          $scope: scope,
          locals: locals
        });
        prevLocation = $location.url();
        prevRoute = $route.current;
        scope.$on('$locationChangeSuccess', function(event, newLoc, oldLoc) {
          if (isClosing) {
            $route.current = prevRoute;
            return $timeout(function() {
              scope.$destroy();
              isClosing = false;
              return ctrl = null;
            });
          } else {
            ctrl = $controller(options.controller, locals);
            return $route.current = prevRoute;
          }
        });
        dialogEl.contents().data('$ngControllerController', ctrl);
        $compile(dialogEl)(scope);
        body.append(dialogBg);
        body.append(dialogEl);
        return $timeout(function() {
          dialogEl.addClass(options.activeClass);
          return dialogBg.addClass(options.backgroundActiveClass);
        }, 5);
      };
      destroy = function() {
        dialogEl.removeClass(options.activeClass);
        dialogBg.removeClass(options.backgroundActiveClass);
        return $timeout(function() {
          dialogEl.remove();
          dialogBg.remove();
          isClosing = true;
          return $location.url(prevLocation);
        }, options.animationOutSpeed);
      };
      getPrevRoute = function() {
        return prevRoute;
      };
      return {
        show: show,
        destroy: destroy,
        prevRoute: getPrevRoute
      };
    }
  ]);

}).call(this);

/*
//@ sourceMappingURL=vp.dialogs.map
*/
